name: Build and Release ReMakeplace Updater

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: "./ReMakeplaceUpdater/package-lock.json"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./ReMakeplaceUpdater/src-tauri -> target"

      - name: Install frontend dependencies
        working-directory: ./ReMakeplaceUpdater
        run: npm ci

      - name: Build Tauri app and create release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: "./ReMakeplaceUpdater"
          tagName: remakeplace-updater-v__VERSION__
          releaseName: "ReMakeplace Updater v__VERSION__"
          releaseBody: |
            ## ReMakeplace Auto-Updater v__VERSION__

            A modern, native auto-updater for ReMakeplace built with Tauri.

            ### ðŸš€ Features
            - **Data Preservation**: Automatically preserves Custom and Save folders
            - **Modern UI**: Clean, responsive interface with dark theme

            ### ðŸ“¦ Installation Options

            **Installers (Recommended for most users):**
            - **Windows**: `.msi` (Windows Installer) or `.exe` (NSIS Setup)
            - **macOS**: `.dmg` (Disk Image)
            - **Linux**: `.deb` (Debian/Ubuntu), `.rpm` (RedHat/Fedora), or `.AppImage` (Universal)

            **Portable Executables (Advanced users):**
            - **Windows**: `remakeplaceupdater.exe` (Portable - no installation required)
            - **macOS**: `remakeplaceupdater` (Portable binary)
            - **Linux**: `remakeplaceupdater` (Portable binary)

            ### ðŸ”§ Setup
            1. Download the appropriate file for your operating system
            2. **Installers**: Run the installer and follow the setup wizard
            3. **Portable**: Extract (if needed) and run directly - no installation required
            4. Launch and configure your ReMakeplace installation path

          releaseDraft: ${{ !startsWith(github.ref, 'refs/tags/v') }}
          prerelease: false
          args: ${{ matrix.args }}
          includeUpdaterJson: false

      - name: Upload portable executables
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # Determine the target directory and executable name based on platform
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            EXECUTABLE_NAME="remakeplaceupdater.exe"
            TARGET_DIR="target/release"
            PORTABLE_NAME="remakeplaceupdater-portable-windows.exe"
          elif [[ "${{ matrix.platform }}" == "ubuntu-22.04" ]]; then
            EXECUTABLE_NAME="remakeplaceupdater"
            TARGET_DIR="target/release"
            PORTABLE_NAME="remakeplaceupdater-portable-linux"
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.args }}" == *"aarch64"* ]]; then
              EXECUTABLE_NAME="remakeplaceupdater"
              TARGET_DIR="target/aarch64-apple-darwin/release"
              PORTABLE_NAME="remakeplaceupdater-portable-macos-aarch64"
            else
              EXECUTABLE_NAME="remakeplaceupdater"
              TARGET_DIR="target/x86_64-apple-darwin/release"
              PORTABLE_NAME="remakeplaceupdater-portable-macos-x64"
            fi
          fi

          # Change to the project directory
          cd ReMakeplaceUpdater

          # Check if the executable exists
          if [[ -f "$TARGET_DIR/$EXECUTABLE_NAME" ]]; then
            echo "Found portable executable at $TARGET_DIR/$EXECUTABLE_NAME"
            
            # Copy the executable with a descriptive name
            cp "$TARGET_DIR/$EXECUTABLE_NAME" "$PORTABLE_NAME"
            
            # Get the tag name
            TAG_NAME=${GITHUB_REF#refs/tags/}
            
            # Upload the portable executable to the release
            gh release upload "$TAG_NAME" "$PORTABLE_NAME" --clobber
            
            echo "Uploaded portable executable: $PORTABLE_NAME"
          else
            echo "Portable executable not found at $TARGET_DIR/$EXECUTABLE_NAME"
            ls -la "$TARGET_DIR/" || echo "Target directory does not exist"
          fi
