# ReMakeplace Auto-Updater - Functionality Requirements
# To be implemented in Tauri/Rust

## Overview
Modern MMO-style launcher and auto-updater for ReMakeplace with a dark theme and orange accents.

## Core Configuration Management
- **Configuration File**: `config.json` with the following structure:
  ```json
  {
    "current_version": "7.25.0",
    "github_repo": "RemakePlace/app", 
    "installation_path": "path/to/installation",
    "exe_path": "Makeplace.exe",
    "preserve_folders": ["Makeplace/Custom", "Makeplace/Save"],
    "update_check_url": "https://api.github.com/repos/RemakePlace/app/releases/latest",
    "last_check": "2025-06-03T23:01:28.574023",
    "auto_check": true
  }
  ```
- **Auto-load configuration** on startup
- **Create default config** if missing
- **Save configuration** changes immediately
- **Validate installation path** (must contain `Makeplace.exe`)

## User Interface Requirements

### Main Window
- **Window Properties**:
  - Title: "ReMakeplace Launcher"
  - Size: 600x550 pixels (resizable, min 600x500)
  - Dark theme with orange (#FF8C42, #E6732A) accent colors
  - Centered on screen
  - Modern, MMO-style appearance

### Layout Structure
1. **Header Section** (orange gradient background):
   - Large title: "ReMakeplace Launcher" 
   - White text on orange background
   - Fixed height: 80px

2. **Installation Path Display**:
   - Shows current installation path
   - "⚙️ Settings" button to modify path
   - Path validation with visual feedback

3. **Version Information Section**:
   - Current version display
   - Latest version display (updated after check)
   - Status messages (checking, up to date, update available, errors)

4. **Progress Section** (shown during updates):
   - Progress bar with orange theme
   - Download status text
   - Download speed indicator (MB/s)
   - Installation progress messages

5. **Button Section** (bottom):
   - **Update Button**: 
     - Text changes: "Update Available" → "Update Now" → "No Updates"/"Up to Date"
     - Orange styling when active
     - Disabled when no updates or during update
   - **Launch Button**:
     - "Launch ReMakeplace" 
     - Always available (launches the main game)
     - Dark gray styling

### Settings Dialog
- **Modal dialog** for first-run setup and configuration changes
- **Welcome message** on first run
- **Folder browser** for installation path selection
- **Real-time validation** with visual feedback:
  - ✅ Green for valid paths with Makeplace.exe found  
  - ❌ Red for invalid paths or missing executable
- **Save & Continue** / **Cancel** buttons
- **Center on screen** and **stay on top**

## Update System

### Version Checking
- **Automatic check** on startup (if enabled)
- **GitHub API integration**: Query latest release from `RemakePlace/app`
- **Version comparison**: Use semantic versioning (packaging library equivalent)
- **Download URL detection**: Find `.7z` asset in release
- **Background threading** for non-blocking UI
- **Error handling** for network failures

### Download System
- **Persistent caching**: Store downloads in `update_cache/` directory
- **Cache filename format**: `v{version}_{original_filename}`
- **Resume/reuse** cached downloads if available
- **Progress tracking**:
  - Real-time progress bar updates
  - Download speed calculation (MB/s)
  - Completion percentage
- **Streaming download** with chunked reading (8KB chunks)
- **Download verification** (compare expected vs actual size)
- **Error handling** with cleanup of incomplete downloads

### Installation Process
1. **Pre-installation validation**:
   - Verify installation path exists
   - Verify archive file exists and is valid

2. **Data preservation**:
   - Backup user data folders: `Makeplace/Custom`, `Makeplace/Save`
   - Backup installation `config.json` if present  
   - Use temporary backup directory: `temp_backup/`

3. **Archive extraction**:
   - **Primary method**: Native 7z extraction library
   - **Fallback method**: System 7zip command line tool
   - **Last resort**: Standard zip extraction (if it's actually a zip)
   - **BCJ2 compression** support notification if needed
   - **Extract to installation directory** with overwrite

4. **Data restoration**:
   - Restore backed up user folders
   - Restore backed up config.json
   - Clean up temporary backup directory

5. **Post-installation**:
   - Update current version in config
   - Update last check timestamp
   - Clean up old cache files (keep current version)
   - Clean up temporary directories

### Cache Management
- **Intelligent cleanup**: Remove old version files, keep current
- **Storage optimization**: Only keep necessary files
- **Error-safe cleanup**: Continue on cleanup failures without user notification
- **Configurable retention**: Option to keep/remove current version cache

## Application Lifecycle

### Startup Sequence
1. Load configuration file
2. Validate installation path
3. If invalid path: Show settings dialog (first-run mode)
4. Create main UI
5. Start background update check
6. Update UI based on check results

### Launch Functionality
- **Execute target application**: Launch `Makeplace.exe` from installation path
- **Working directory**: Set to installation path
- **Process management**: Detached process (don't wait for completion)
- **Error handling**: Show errors if executable not found or launch fails
- **Auto-close**: Close launcher after successful game launch

### Error Handling
- **User-friendly messages**: Clear, actionable error descriptions
- **Network errors**: Graceful handling of connection issues
- **File system errors**: Handle permissions, missing files, disk space
- **Archive extraction errors**: Support multiple extraction methods
- **UI error display**: Red text with ❌ icons for visual clarity
- **Recovery**: Allow retry after fixing issues

## Technical Requirements

### Threading Model
- **Main UI thread**: Keep responsive at all times
- **Background operations**:
  - Update checking
  - File downloading  
  - Archive extraction
  - File operations
- **Thread-safe UI updates**: Queue UI updates to main thread

### File System Operations
- **Path handling**: Cross-platform path management
- **Atomic operations**: Safe file moves and copies
- **Permission handling**: Graceful handling of access issues
- **Directory creation**: Recursive directory creation as needed
- **Cleanup operations**: Robust cleanup with error tolerance

### Network Operations
- **HTTP client**: Robust HTTP implementation with timeout handling
- **GitHub API**: JSON parsing for release information
- **Download streaming**: Memory-efficient large file downloads
- **Progress reporting**: Real-time progress updates
- **Error retry**: Configurable retry logic for transient failures

### Data Persistence
- **JSON configuration**: Human-readable config file format
- **Atomic writes**: Safe configuration updates
- **Backup and restore**: Reliable data preservation during updates
- **Path validation**: Ensure paths exist and are accessible

## Platform Support
- **Primary target**: Windows 10+ (matches current Python version)
- **File associations**: `.exe` execution and `.7z` archive handling
- **System integration**: Native file dialogs and window management
- **Modern UI**: Native look and feel with custom theming

## Build and Distribution 
- **Single executable**: Self-contained application bundle
- **No external dependencies**: All libraries bundled
- **Small footprint**: Optimized executable size
- **Auto-updatable**: The updater can potentially update itself
- **Portable**: Can run from any directory

## Security Considerations
- **Secure downloads**: HTTPS for all network operations
- **File validation**: Verify download integrity
- **Safe extraction**: Prevent directory traversal attacks
- **Minimal permissions**: Only request necessary system access
- **Data protection**: Preserve user data during all operations

## Performance Requirements
- **Fast startup**: < 2 seconds to main UI
- **Responsive UI**: Never block main thread
- **Efficient downloads**: Utilize available bandwidth effectively
- **Memory efficient**: Reasonable memory usage even for large downloads
- **Quick updates**: Minimize time from download to launch

## User Experience Goals
- **Professional appearance**: Modern, polished interface
- **Clear status communication**: Always show what's happening
- **Error recovery**: Help users fix problems
- **Minimal friction**: Reduce clicks and manual steps
- **Familiar patterns**: Use standard UI conventions
- **Visual feedback**: Progress bars, status colors, icons 